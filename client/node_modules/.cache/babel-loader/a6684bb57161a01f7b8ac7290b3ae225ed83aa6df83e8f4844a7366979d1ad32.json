{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hrish\\\\OneDrive - hyderabad.bits-pilani.ac.in\\\\Desktop\\\\Project Bridge\\\\client\\\\src\\\\components\\\\student\\\\projectBank\\\\RequestFormModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { CModal, CModalHeader, CModalTitle, CModalBody, CModalFooter, CButton, CForm, CFormInput, CFormTextarea, CListGroup, CListGroupItem, CFormCheck } from '@coreui/react';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport Chip from '@mui/material/Chip';\n// import Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport axios from 'axios';\nimport Snackbar from '@mui/material/Snackbar';\nimport AlertTitle from '@mui/material/AlertTitle';\nimport Alert from './Alert';\nimport Button from '@mui/material/Button';\nimport './RequestFormModal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RequestFormModal = ({\n  visible,\n  onClose,\n  project,\n  userId,\n  selectedProject\n}) => {\n  _s();\n  console.log(\"ProjectData:\", selectedProject);\n  const [formData, setFormData] = useState({\n    projectName: project.project_name || '',\n    projectDescription: project.project_description || '',\n    whyWantToDoProject: '',\n    currentCGPA: '',\n    selectedPrerequisites: [] // State to store selected prerequisites\n  });\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [draftDetails, setDraftDetails] = useState(null);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [snackbarSeverity, setSnackbarSeverity] = useState('success');\n  const [snackbarTitle, setSnackbarTitle] = useState('');\n  const [alertStyle, setAlertStyle] = useState('');\n  const [validated, setValidated] = useState(false);\n  useEffect(() => {\n    // Fetch draft details when component mounts\n    fetchDraftDetails();\n  }, [project]);\n  const fetchDraftDetails = async () => {\n    try {\n      // Fetch draft details from the backend\n      const response = await axios.get(`http://localhost:8000/students/getDraft/${userId}/${project.projectId}`);\n      const draft = response.data;\n      // Update form data with draft details if draft exists\n      if (draft) {\n        setFormData({\n          projectName: draft.projectName || '',\n          projectDescription: draft.projectDescription || '',\n          whyWantToDoProject: draft.reason_to_do_project || '',\n          currentCGPA: draft.current_cgpa || '',\n          selectedPrerequisites: draft.pre_requisites_fulfilled || []\n        });\n        setDraftDetails(draft); // Store draft details in state\n      }\n    } catch (error) {\n      console.error('Error fetching draft details:', error);\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handlePrerequisitesChange = prerequisite => {\n    const updatedPrerequisites = formData.selectedPrerequisites.includes(prerequisite) ? formData.selectedPrerequisites.filter(item => item !== prerequisite) : [...formData.selectedPrerequisites, prerequisite];\n    setFormData({\n      ...formData,\n      selectedPrerequisites: updatedPrerequisites\n    });\n  };\n  const handleSubmit = event => {\n    // Show confirmation message\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    setValidated(true);\n    setShowConfirmation(true);\n  };\n  const handleConfirmSendRequest = event => {\n    setShowConfirmation(false);\n    onClose();\n  };\n  const handleBack = () => {\n    // Hide confirmation message\n    setShowConfirmation(false);\n  };\n  const handleSaveDraft = async () => {\n    try {\n      await axios.post(`http://localhost:8000/students/saveDraft`, {\n        studentId: userId,\n        projectId: selectedProject.projectId,\n        projectName: selectedProject.project_name,\n        projectDescription: selectedProject.project_description,\n        whyWantToDoProject: formData.whyWantToDoProject,\n        currentCGPA: formData.currentCGPA,\n        selectedPrerequisites: formData.selectedPrerequisites\n      });\n      setSnackbarSeverity('success');\n      setSnackbarTitle('Success');\n      setSnackbarMessage('Draft saved successfully');\n      setAlertStyle({\n        backgroundColor: '#ddffdd',\n        color: 'green'\n      });\n      console.log(\"success log\");\n    } catch (error) {\n      setSnackbarSeverity('error');\n      setSnackbarTitle('Failure');\n      setSnackbarMessage('Error saving draft');\n      setAlertStyle({\n        backgroundColor: '#ffdddd',\n        color: 'red'\n      });\n      console.error('Error saving draft:', error);\n      console.log(\"failure log\");\n    }\n    setSnackbarOpen(true);\n  };\n  const handleSnackbarClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnackbarOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CModal, {\n      backdrop: \"static\",\n      visible: visible,\n      onClose: onClose,\n      \"aria-labelledby\": \"RequestFormModalTitle\",\n      children: /*#__PURE__*/_jsxDEV(CForm, {\n        className: \"row g-3 needs-validation\",\n        noValidate: true,\n        validated: validated,\n        children: [/*#__PURE__*/_jsxDEV(CModalHeader, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(CModalTitle, {\n            id: \"RequestFormModalTitle\",\n            children: \"Request Form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(CModalBody, {\n          children: [/*#__PURE__*/_jsxDEV(TextField\n          // labelId=\"name-label\"\n          , {\n            type: \"text\",\n            name: \"projectName\",\n            value: formData.projectName,\n            onChange: handleInputChange,\n            placeholder: \"Project Name\",\n            id: \"outlined-disabled\",\n            label: \"Project Name\",\n            defaultValue: \"Hello World\",\n            style: {\n              marginTop: '25px'\n            },\n            fullWidth: true,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            name: \"projectDescription\",\n            value: formData.projectDescription,\n            onChange: handleInputChange,\n            placeholder: \"Project Description\",\n            id: \"outlined-disabled\",\n            label: \"Project Description\",\n            defaultValue: \"Hello World\",\n            style: {\n              marginTop: '25px'\n            },\n            fullWidth: true,\n            multiline: true,\n            maxRows: 4,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(CFormTextarea, {\n            name: \"whyWantToDoProject\",\n            value: formData.whyWantToDoProject,\n            onChange: handleInputChange,\n            placeholder: \"Why do you want to do this project?\",\n            id: \"outlined\",\n            label: \"Why do you want to do this project?\",\n            style: {\n              marginTop: '25px'\n            },\n            fullWidth: true,\n            multiline: true,\n            rows: 4,\n            feedbackValid: \"Looks good!\",\n            feedbackInvalid: \"Please fill the reason.\",\n            required: true\n            // defaultValue=\"Hello World\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(CListGroup, {\n            style: {\n              marginTop: '25px'\n            },\n            id: \"floatingInputGrid\",\n            floatingLabel: \"Email address\",\n            placeholder: \"name@example.com\",\n            value: \"email@example.com\",\n            children: project.pre_requisites.map(prerequisite => /*#__PURE__*/_jsxDEV(CListGroupItem, {\n              children: /*#__PURE__*/_jsxDEV(CFormCheck, {\n                label: prerequisite,\n                checked: formData.selectedPrerequisites.includes(prerequisite),\n                onChange: () => handlePrerequisitesChange(prerequisite)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 19\n              }, this)\n            }, prerequisite, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(CModalFooter, {\n          children: !showConfirmation ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(CButton, {\n              color: \"secondary\",\n              onClick: onClose,\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(CButton, {\n              color: \"primary\",\n              onClick: handleSaveDraft,\n              children: \"Save Draft\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(CButton, {\n              color: \"warning\",\n              onClick: handleSubmit,\n              children: \"Send Request\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 11\n          }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(CButton, {\n              color: \"secondary\",\n              onClick: handleBack,\n              children: \"Back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(CButton, {\n              color: \"success\",\n              onClick: handleConfirmSendRequest,\n              children: \"Confirm Send Request\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      id: \"alert_snackbar\",\n      open: snackbarOpen,\n      autoHideDuration: 60000,\n      onClose: handleSnackbarClose,\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        id: \"alert_toast\",\n        onClose: handleSnackbarClose,\n        severity: snackbarSeverity,\n        sx: {\n          width: '100%'\n        },\n        style: alertStyle,\n        children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n          children: snackbarTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 7\n        }, this), snackbarMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(RequestFormModal, \"BAh7u7D+MdQ5UvnjTpcG0laPGmY=\");\n_c = RequestFormModal;\nexport default RequestFormModal;\nvar _c;\n$RefreshReg$(_c, \"RequestFormModal\");","map":{"version":3,"names":["React","useState","useEffect","CModal","CModalHeader","CModalTitle","CModalBody","CModalFooter","CButton","CForm","CFormInput","CFormTextarea","CListGroup","CListGroupItem","CFormCheck","InputLabel","MenuItem","FormControl","Select","Chip","TextField","axios","Snackbar","AlertTitle","Alert","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","RequestFormModal","visible","onClose","project","userId","selectedProject","_s","console","log","formData","setFormData","projectName","project_name","projectDescription","project_description","whyWantToDoProject","currentCGPA","selectedPrerequisites","showConfirmation","setShowConfirmation","draftDetails","setDraftDetails","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","snackbarTitle","setSnackbarTitle","alertStyle","setAlertStyle","validated","setValidated","fetchDraftDetails","response","get","projectId","draft","data","reason_to_do_project","current_cgpa","pre_requisites_fulfilled","error","handleInputChange","e","name","value","target","handlePrerequisitesChange","prerequisite","updatedPrerequisites","includes","filter","item","handleSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","handleConfirmSendRequest","handleBack","handleSaveDraft","post","studentId","backgroundColor","color","handleSnackbarClose","reason","children","backdrop","className","noValidate","closeButton","id","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","label","defaultValue","style","marginTop","fullWidth","disabled","multiline","maxRows","rows","feedbackValid","feedbackInvalid","required","floatingLabel","pre_requisites","map","checked","onClick","open","autoHideDuration","anchorOrigin","vertical","horizontal","severity","sx","width","_c","$RefreshReg$"],"sources":["C:/Users/hrish/OneDrive - hyderabad.bits-pilani.ac.in/Desktop/Project Bridge/client/src/components/student/projectBank/RequestFormModal.js"],"sourcesContent":["import React, { useState,  useEffect  } from 'react';\r\nimport {\r\n  CModal,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CButton,\r\n  CForm,\r\n  CFormInput,\r\n  CFormTextarea,\r\n  CListGroup,\r\n  CListGroupItem,\r\n  CFormCheck,\r\n} from '@coreui/react';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\nimport Chip from '@mui/material/Chip';\r\n// import Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport axios from 'axios';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport AlertTitle from '@mui/material/AlertTitle';\r\nimport Alert from './Alert';\r\nimport Button from '@mui/material/Button';\r\nimport './RequestFormModal.css'\r\n\r\nconst RequestFormModal = ({ visible, onClose, project, userId, selectedProject }) => {\r\n  console.log(\"ProjectData:\", selectedProject);\r\n  const [formData, setFormData] = useState({\r\n    projectName: project.project_name || '',\r\n    projectDescription: project.project_description || '',\r\n    whyWantToDoProject: '',\r\n    currentCGPA: '',\r\n    selectedPrerequisites: [], // State to store selected prerequisites\r\n  });\r\n\r\n  \r\n  const [showConfirmation, setShowConfirmation] = useState(false);\r\n  const [draftDetails, setDraftDetails] = useState(null);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [snackbarSeverity, setSnackbarSeverity] = useState('success');\r\n  const [snackbarTitle, setSnackbarTitle] = useState('');\r\n  const [alertStyle, setAlertStyle] = useState('');\r\n  const [validated, setValidated] = useState(false);\r\n  useEffect(() => {\r\n    // Fetch draft details when component mounts\r\n    fetchDraftDetails();\r\n  }, [project]);\r\n\r\n  const fetchDraftDetails = async () => {\r\n    try {\r\n      // Fetch draft details from the backend\r\n      const response = await axios.get(`http://localhost:8000/students/getDraft/${userId}/${project.projectId}`);\r\n      const draft = response.data;\r\n      // Update form data with draft details if draft exists\r\n      if (draft) {\r\n        setFormData({\r\n          projectName: draft.projectName || '',\r\n          projectDescription: draft.projectDescription || '',\r\n          whyWantToDoProject: draft.reason_to_do_project || '',\r\n          currentCGPA: draft.current_cgpa || '',\r\n          selectedPrerequisites: draft.pre_requisites_fulfilled || [],\r\n        });\r\n        setDraftDetails(draft); // Store draft details in state\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching draft details:', error);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handlePrerequisitesChange = (prerequisite) => {\r\n    const updatedPrerequisites = formData.selectedPrerequisites.includes(prerequisite)\r\n      ? formData.selectedPrerequisites.filter((item) => item !== prerequisite)\r\n      : [...formData.selectedPrerequisites, prerequisite];\r\n  \r\n    setFormData({\r\n      ...formData,\r\n      selectedPrerequisites: updatedPrerequisites,\r\n    });\r\n  };\r\n  \r\n  \r\n\r\n  const handleSubmit = (event) => {\r\n    // Show confirmation message\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n    setValidated(true);\r\n    setShowConfirmation(true);\r\n  };\r\n\r\n  const handleConfirmSendRequest = (event) => {\r\n    setShowConfirmation(false);\r\n    onClose();\r\n  };\r\n\r\n  const handleBack = () => {\r\n    // Hide confirmation message\r\n    setShowConfirmation(false);\r\n  };\r\n\r\n  const handleSaveDraft = async () => {\r\n    try {\r\n      await axios.post(`http://localhost:8000/students/saveDraft`, {\r\n        studentId: userId,\r\n        projectId: selectedProject.projectId,\r\n        projectName: selectedProject.project_name,\r\n        projectDescription: selectedProject.project_description,\r\n        whyWantToDoProject: formData.whyWantToDoProject,\r\n        currentCGPA: formData.currentCGPA,\r\n        selectedPrerequisites: formData.selectedPrerequisites,\r\n      });\r\n      setSnackbarSeverity('success');\r\n      setSnackbarTitle('Success');\r\n      setSnackbarMessage('Draft saved successfully');\r\n      setAlertStyle({\r\n        backgroundColor: '#ddffdd',\r\n        color: 'green'\r\n    });\r\n      console.log(\"success log\");\r\n    } catch (error) {\r\n      setSnackbarSeverity('error');\r\n      setSnackbarTitle('Failure');\r\n      setSnackbarMessage('Error saving draft');\r\n      setAlertStyle({\r\n        backgroundColor: '#ffdddd',\r\n        color: 'red'\r\n    });\r\n      console.error('Error saving draft:', error);\r\n      console.log(\"failure log\");\r\n    }\r\n    setSnackbarOpen(true);\r\n  };\r\n\r\n  const handleSnackbarClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setSnackbarOpen(false);\r\n  };\r\n\r\n  \r\n  return (\r\n    <>\r\n    <CModal\r\n      backdrop=\"static\"\r\n      visible={visible}\r\n      onClose={onClose}\r\n      aria-labelledby=\"RequestFormModalTitle\"\r\n\r\n    >\r\n      <CForm\r\n    className=\"row g-3 needs-validation\"\r\n    noValidate\r\n    validated={validated}\r\n  >\r\n\r\n<CModalHeader closeButton>\r\n        <CModalTitle id=\"RequestFormModalTitle\">Request Form</CModalTitle>\r\n      </CModalHeader>\r\n      <CModalBody>\r\n        {/* Form fields */}\r\n        <TextField\r\n          // labelId=\"name-label\"\r\n          type=\"text\"\r\n          name=\"projectName\"\r\n          value={formData.projectName}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Project Name\"\r\n          id=\"outlined-disabled\"\r\n          label=\"Project Name\"\r\n          defaultValue=\"Hello World\"\r\n          style={{marginTop:'25px'}}\r\n          fullWidth\r\n          disabled\r\n        />\r\n        <TextField\r\n          name=\"projectDescription\"\r\n          value={formData.projectDescription}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Project Description\"\r\n          id=\"outlined-disabled\"\r\n          label=\"Project Description\"\r\n          defaultValue=\"Hello World\"\r\n          style={{marginTop:'25px'}}\r\n          fullWidth\r\n          multiline\r\n          maxRows={4}\r\n          disabled\r\n        />\r\n        <CFormTextarea\r\n          name=\"whyWantToDoProject\"\r\n          value={formData.whyWantToDoProject}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Why do you want to do this project?\"\r\n          id=\"outlined\"\r\n          label=\"Why do you want to do this project?\"\r\n          style={{marginTop:'25px'}}\r\n          fullWidth \r\n          multiline\r\n          rows={4}\r\n          feedbackValid=\"Looks good!\"\r\n          feedbackInvalid=\"Please fill the reason.\"\r\n          required\r\n          // defaultValue=\"Hello World\"\r\n        />\r\n        {/* Multi-select input for prerequisites */}\r\n        {/* <FormControl style={{ m: 1, width: '100%', marginTop: '2rem' }}>\r\n          <InputLabel id=\"prerequisites-label\">Prerequisites</InputLabel>\r\n          <Select\r\n            labelId=\"prerequisites-label\"\r\n            id=\"prerequisites-select\"\r\n            multiple\r\n            value={formData.selectedPrerequisites}\r\n            onChange={handlePrerequisitesChange}\r\n            feedbackValid=\"Looks good!\"\r\n            feedbackInvalid=\"Please select atleast one pre-requisite.\"\r\n            required\r\n            renderValue={(selected) => (\r\n              <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                {selected.map((value) => (\r\n                  <Chip key={value} label={value} style={{ margin: '2px' }} />\r\n                ))}\r\n              </div>\r\n            )}\r\n          >\r\n            {project.pre_requisites.map((prerequisite) => (\r\n              <MenuItem key={prerequisite} value={prerequisite}>\r\n                {prerequisite}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl> */}\r\n        <CListGroup style={{ marginTop: '25px' }}id=\"floatingInputGrid\"\r\n        floatingLabel=\"Email address\"\r\n        placeholder=\"name@example.com\"\r\n        value=\"email@example.com\">\r\n              {project.pre_requisites.map((prerequisite) => (\r\n                <CListGroupItem key={prerequisite}>\r\n                  <CFormCheck\r\n                    label={prerequisite}\r\n                    checked={formData.selectedPrerequisites.includes(prerequisite)}\r\n                    onChange={() => handlePrerequisitesChange(prerequisite)}\r\n                  />\r\n                </CListGroupItem>\r\n              ))}\r\n            </CListGroup>\r\n      </CModalBody>\r\n      <CModalFooter>\r\n        {!showConfirmation ? (\r\n          <React.Fragment>\r\n            <CButton color=\"secondary\" onClick={onClose}>\r\n              Close\r\n            </CButton>\r\n            <CButton color=\"primary\" onClick={handleSaveDraft}>\r\n              Save Draft\r\n            </CButton>\r\n            <CButton color=\"warning\" onClick={handleSubmit}>\r\n              Send Request\r\n            </CButton>\r\n          </React.Fragment>\r\n        ) : (\r\n          <React.Fragment>\r\n            <CButton color=\"secondary\" onClick={handleBack}>\r\n              Back\r\n            </CButton>\r\n            <CButton color=\"success\" onClick={handleConfirmSendRequest}>\r\n              Confirm Send Request\r\n            </CButton>\r\n          </React.Fragment>\r\n        )}\r\n      </CModalFooter>\r\n\r\n  </CForm>\r\n\r\n    \r\n    </CModal>\r\n    <Snackbar id='alert_snackbar' open={snackbarOpen} autoHideDuration={60000} onClose={handleSnackbarClose}  anchorOrigin={{ vertical: 'top', horizontal: 'right' }}>\r\n      <Alert id='alert_toast' onClose={handleSnackbarClose} severity={snackbarSeverity} sx={{ width: '100%' }} style={alertStyle}>\r\n      <AlertTitle>{snackbarTitle}</AlertTitle>\r\n        {snackbarMessage}\r\n      </Alert>\r\n    </Snackbar>\r\n   </>\r\n  );\r\n};\r\n\r\nexport default RequestFormModal;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}